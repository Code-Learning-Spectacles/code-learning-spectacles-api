name: "Deploy API"

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_VAR_AWS_RDS_ENDPOINT: ${{ secrets.AWS_RDS_ENDPOINT }}
      TF_VAR_DB_USERNAME: ${{ secrets.DB_USERNAME }}
      TF_VAR_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      TF_VAR_DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "8.0"

      - name: Build and Publish
        working-directory: "./CodeLearningSpectaclesAPI"
        run: dotnet publish -c Release -o publish && mkdir -p publish

      - name: Update Release with .env
        working-directory: "./CodeLearningSpectaclesAPI"
        run: |
          echo "SERVER=${{secrets.DB_HOST_DEV}}" > publish/.env
          echo "USER_ID=${{secrets.DB_DEV_USERNAME}}" >> publish/.env
          echo "PASSWORD=${{secrets.DB_DEV_PASSWORD }}" >> publish/.env
          echo "DATABASE=codeLearningDB" >> publish/.env
          echo "PORT=${{secrets.DB_PORT}}" >> publish/.env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GITHUB_ACTION_EBS
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate Identity with AWS
        working-directory: ./infrastructure
        run: aws sts get-caller-identity

      - name: Package application
        run: |
          cd ./CodeLearningSpectaclesAPI/publish
          zip -r CodeLearningSpectaclesAPI.zip .
          mv CodeLearningSpectaclesAPI.zip ../../
          cd ../..
          
      - name: Upload application bundle to S3
        run: |
          aws s3 cp CodeLearningSpectaclesAPI.zip s3://code-learning-state-bucket/
        
      - name: Generate version label
        id: generate_version_label
        run: echo "::set-output name=version_label::$(date +'%Y%m%d%H%M%S')"
        
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3

      # - name: Initialize Terraform
      #   id: init
      #   working-directory: ./infrastructure
      #   run: terraform init

      # # - name: Generate infrastructure plan
      # #   id: plan
      # #   working-directory: ./infrastructure
      # #   run: terraform plan -out=.tfplan

      # - name: Apply infrastructure plan
      #   id: apply
      #   working-directory: ./infrastructure
      #   run: terraform apply 
      - name: Trigger Elastic Beanstalk deployment
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name API \
            --version-label ${{ steps.generate_version_label.outputs.version_label }} \
            --source-bundle S3Bucket="code-learning-state-bucket",S3Key="CodeLearningSpectaclesAPI.zip" \
            --region eu-west-1
      
          aws elasticbeanstalk update-environment \
            --application-name API \
            --environment-name API-env \
            --version-label ${{ steps.generate_version_label.outputs.version_label }} \
            --region eu-west-1
      # - name: Trigger Elastic Beanstalk deployment
      #   run: |
      #     aws elasticbeanstalk update-environment --application-name API --environment-name API-env  --region eu-west-1 

    
